General Purpose Instances: T-Series(Burstable Performance)T4g, T3, T3a, T2,| M-Series(Balanced Compute & Memory)M7g, M6g, M6i, M5, M4
Compute Optimized Instances:C-Series(High Compute Performance)C7g, C7i, C6g, C6i, C5, C4,
Memory Optimized Instances:R-Series (High RAM for Databases & In-Memory Caching)R7g, R6g, R6i, R5, R4 
                    | X-Series (Extreme Memory for SAP & Large Databases) X2gd, X2idn, X2iedn |Z-Series (High Frequency & Memory) z1d
Storage Optimized Instances:  I-Series (High IOPS Storage) I4g, I3, I3en | D-Series (Dense Storage for Data Warehousing) D3, D2
                            | H-Series (HDD Optimized for Big Data) H1
Accelerated Computing Instances: P-Series (GPU for Machine Learning & AI) P4d, P3, P2 | G-Series (Graphics & ML Inference) G5, G4ad, G4dn
                            | Inf-Series (Inference Optimization) Inf2, Inf1 | Trn-Series (Deep Learning Training on AWS Chips)Trn1
                            |F-Series (FPGA for Custom Workloads) F1
Choosing the Right Instance Type: Workload	Recommended Instance Type
Web Apps, Microservices                     T4g, T3, M5
High-Performance Computing                  C7g, C6i, C5
Databases (SQL, NoSQL)                      R6i, R5, X2gd
Machine Learning Training                   P4d, Trn1
AI Inference                                Inf2, G5
Video Processing, Streaming                 G4dn, G5
Data Warehousing                            D3, I3, H1
-------------------------------------------------------------------------------------------------------
For unpredictable, flexible workloads ‚Üí     On-Demand
For consistent, steady workloads ‚Üí          Reserved Instances or Savings Plans
For cost-sensitive, fault-tolerant jobs ‚Üí   Spot Instances
For compliance/security needs ‚Üí             Dedicated Hosts/Instances
For dynamically scaling apps ‚Üí              Auto Scaling with a mix of instances
-------------------------------------------------------------------------------------------------------
aws configure                            <--The CLI asks for a default region so it knows where to send your commands.
aws ec2 describe-instances               <--That region becomes the default, so when you run
aws ec2 describe-instances --region us-west-2 <--It fetches instances only from that region unless you specify another one like
-----------
aws configure --profile <profile-name>   <--Use the following command to configure a profile for each project
aws configure --profile project-dev
aws configure --profile project-prod
This will prompt you for:Access Key, Secret Key, Region, Output format (e.g., json, table)
aws s3 ls --profile project-dev          <--You can use a profile explicitly in any AWS CLI command using the --profile flag.
aws ec2 describe-instances --profile project-prod
##To avoid specifying --profile in every command, export the AWS_PROFILE environment variable:
#Linux/macOS:                  export AWS_PROFILE=project-dev
#Windows (Command Prompt):     set AWS_PROFILE=project-dev
#Windows (PowerShell):         $env:AWS_PROFILE = "project-dev"
aws configure list-profiles              <--List All Configured Profiles

##Optional: Use ~/.aws/config and ~/.aws/credentials
You can manually edit:
~/.aws/config      <-‚Äì stores profile names and default regions/output.
~/.aws/credentials <-‚Äì stores access/secret keys.
Example ~/.aws/config:
[profile project-dev]
region = us-east-1
output = json

[profile project-prod]
region = eu-west-1
output = table

Example ~/.aws/credentials:
[project-dev]
aws_access_key_id = YOUR_DEV_KEY
aws_secret_access_key = YOUR_DEV_SECRET

[project-prod]
aws_access_key_id = YOUR_PROD_KEY
aws_secret_access_key = YOUR_PROD_SECRET

#You can switch between profiles in scripts by setting the AWS_PROFILE environment variable dynamically.
-------------------------------------------------------------------------------------------------------
Option 1: Get from IAM Console (Recommended)
Log in to AWS Console---->Go to AWS IAM Console---->Navigate to Users--->In the IAM dashboard, click Users in the left panel.
Select your user or create a new IAM user---->Create Access Keys:Click the Security credentials tab.
Under Access keys, click Create access key.Copy & Save the Access Key ID and Secret Access Key. ‚ö†Ô∏è You will not be able to see the Secret Access Key again after this step!
Option 2: Get Using AWS CLI
If you already have an AWS CLI session with sufficient permissions, you can create an access key using:
aws iam create-access-key --user-name <YOUR_IAM_USER>
aws iam create-access-key --user-name my-user
--------------------------------------------------------------------------------------------------------
aws configure
 AWS Access Key ID: Your AWS access key.
 AWS Secret Access Key: Your secret access key.
 Default region: Specify the default AWS region (e.g., us-west-2).
 Output format: Choose the default output format (e.g., json, text, table).
 ---
 export AWS_ACCESS_KEY_ID=<your-access-key-id>
 export AWS_SECRET_ACCESS_KEY=<your-secret-access-key>
 export AWS_DEFAULT_REGION=<your-region>
 ---
 AWS Credentials File:Stored in ~/.aws/credentials and automatically used by AWS SDKs and CLI.
 [default]
 aws_access_key_id = <your-access-key-id>
 aws_secret_access_key = <your-secret-access-key>
----
aws eks update-kubeconfig --region <region> --name <cluster-name>
kubectl config get-contexts
CURRENT   NAME                    CLUSTER                 AUTHINFO                NAMESPACE
*         my-eks-cluster-context  arn:aws:eks:us-west-2:123456789012:cluster/my-eks-cluster  aws:eks-user
          another-cluster-context arn:aws:eks:us-west-2:123456789012:cluster/another-cluster  aws:eks-user
kubectl config use-context <context-name>   //NAME column has context-name
kubectl config current-context
kubectl get nodes
----
aws ec2 describe-instances
aws ec2 start-instances --instance-ids i-1348636c
aws sns publish --topic-arn arn:aws:sns:us-east-1:546419318123:OperationsError --message "Script Failure"
aws sqs receive-message --queue-url https://queue.amazonaws.com/546419318123/Test
aws help
aws autoscaling help
aws autoscaling create-auto-scaling-group help
aws s3 ls s3://mybucket
aws s3 cp myfolder s3://mybucket/myfolder --recursive
aws s3 sync myfolder s3://mybucket/myfolder --exclude *.tmp
s3fs-fuse  <--s3fs is a FUSE filesystem that allows you to mount an Amazon S3 bucket as a local filesystem(yum install s3fs-fuse)
s3fs mybucket /path/to/mountpoint -o passwd_file=${HOME}/.passwd-s3fs   <--mounting a dir to bucket
---------------------------------------------------------------------------------------------------------
Use Case                                                                Best Choice
Restrict API Access to AWS services (e.g., S3, DynamoDB)                IAM
Restrict Kubernetes API Access for Pods                                 Service Account
Restrict instance-level access (e.g., allow SSH to EC2)                 Security Group
Restrict subnet-level traffic (e.g., block all outgoing traffic)        NACL
---------------------------------------------------------------------------------------------------------
Use Case                                                                Best AWS Firewall
Secure EC2, RDS, and Load Balancer traffic                              Security Groups
Block traffic at the subnet level                                       Network ACLs (NACLs)
Protect against web attacks (SQLi, XSS, etc.)                           AWS WAF
Centralized security for multiple accounts                              AWS Firewall Manager
Network-level security for VPCs                                         AWS Network Firewall
DDoS protection                                                         AWS Shield
---------------------------------------------------------------------------------------------------------
Step-by-Step Guide to Setting Up AWS Firewalls üöÄ
Below are step-by-step instructions for setting up different AWS firewall solutions based on your security needs.

1Ô∏è‚É£ Set Up Security Groups (Instance-Level Firewall)
Security Groups act as stateful firewalls for EC2 instances, RDS, and Load Balancers.

‚úÖ Step 1: Create a Security Group
Log in to AWS Console ‚Üí Go to EC2 ‚Üí Click Security Groups.
Click Create Security Group.
Enter Name & Description (e.g., web-server-sg).
Choose the VPC where the security group will be applied.
‚úÖ Step 2: Add Inbound Rules
Click Add Rule.
Set Rule Type:
For SSH (Port 22): Allow only your IP.
For HTTP (Port 80): Allow from 0.0.0.0/0 (public access).
Click Create Security Group.
‚úÖ Step 3: Attach Security Group to EC2
Go to EC2 Instances ‚Üí Select an instance.-->Click Actions ‚Üí Networking ‚Üí Change Security Groups.
Select the new Security Group and Save.
üîπ Done! Now, only allowed traffic can reach your instance.

2Ô∏è‚É£ Set Up Network ACLs (Subnet-Level Firewall)
Network ACLs (NACLs) act as stateless firewalls at the subnet level.

‚úÖ Step 1: Create a Network ACL
Log in to AWS Console ‚Üí Go to VPC. --> Click Network ACLs ‚Üí Click Create Network ACL.--> Enter Name and select VPC.
‚úÖ Step 2: Add Inbound & Outbound Rules
Click Inbound Rules ‚Üí Edit Rules.-->Add a rule to allow HTTP traffic:
Rule Number: 100
Protocol: TCP
Port Range: 80
Source: 0.0.0.0/0
Action: Allow
Add a rule to deny all other traffic:
Rule Number: 200
Protocol: All
Source: 0.0.0.0/0
Action: Deny
üîπ Done! Now, only HTTP traffic is allowed.

3Ô∏è‚É£ Set Up AWS WAF (Web Application Firewall)
AWS WAF protects against SQL injection, XSS, and bot attacks.

‚úÖ Step 1: Create a WAF WebACL
Log in to AWS Console ‚Üí Open AWS WAF & Shield.
Click Web ACLs ‚Üí Click Create Web ACL.
Name your Web ACL (e.g., MyWebACL).
Choose AWS Region.
‚úÖ Step 2: Associate Web ACL with a Resource
Select the resource type (Application Load Balancer, CloudFront, API Gateway).
Select the resource where you want to attach WAF.
‚úÖ Step 3: Add Security Rules
Click Add Rules ‚Üí Select Managed Rules.
Choose AWS Managed Rules:
AWS-AWSManagedRulesCommonRuleSet (Blocks common web attacks).
AWSManagedRulesSQLiRuleSet (Blocks SQL injection).
AWSManagedRulesAnonymousIpList (Blocks VPN/proxy traffic).
Click Create Web ACL.
üîπ Done! Your web application is now protected.

4Ô∏è‚É£ Set Up AWS Network Firewall (VPC-Level Security)
AWS Network Firewall provides deep packet inspection for VPCs.

‚úÖ Step 1: Create a Firewall
Go to AWS Console ‚Üí Open AWS Network Firewall.-->Click Create firewall.-->Enter Firewall Name and select VPC & Subnets.
‚úÖ Step 2: Create Firewall Rules
Click Create Rule Group.-->Add a rule to allow HTTP traffic:
Protocol: TCP
Port: 80
Source: 0.0.0.0/0
Action: Allow
Add a rule to deny all other traffic:
Action: Deny
üîπ Done! Your VPC traffic is now secured.

5Ô∏è‚É£ Set Up AWS Shield (DDoS Protection)
AWS Shield protects against DDoS attacks.

‚úÖ Step 1: Enable AWS Shield
Go to AWS Console ‚Üí Open AWS Shield.-->Click Activate AWS Shield Advanced.-->Choose resources to protect:
ALB, CloudFront, Route 53, or API Gateway.
Click Enable Protection.
üîπ Done! AWS Shield is now defending your application.
---------------------------------------------------------------------------------------------------------------
Firewall                         Purpose                                         Best For
Security Groups                  Stateful, per-instance                          Protecting EC2, RDS, Load Balancers
Network ACLs (NACLs)             Stateless, per-subnet                           Blocking traffic at the subnet level
AWS WAF                          Web security                                    Protecting web apps from attacks (SQLi, XSS)
AWS Network Firewall             Deep network protection                         Advanced network security in VPC
AWS Shield                       DDoS protection                                 Protecting against large-scale DDoS
----------------------------------------------------------------------------------------------------------------
1Ô∏è‚É£ Compute Services (Run Applications & Workloads)
Service                           Purpose                                         Use Case
EC2 (Elastic Compute Cloud)       Virtual machines (VMs)                          Web servers, applications, databases
Lambda                            Serverless compute                              Event-driven apps, microservices, API backends
ECS (Elastic Container Service)   Managed Docker containers                       Running containers without managing servers
EKS (Elastic Kubernetes Service)  Managed Kubernetes                              Kubernetes-based applications
Fargate                           Serverless containers                           Running containers without managing infrastructure
2Ô∏è‚É£ Storage & Backup Services
Service                           Purpose                                         Use Case
S3 (Simple Storage Service)       Object storage                                  Website hosting, backups, big data
EBS (Elastic Block Store)         Block storage for EC2,like a hard disk          Persistent storage for EC2,Mountable On	Single EC2 instance
EFS (Elastic File System)         Managed file system,NetworkFileSystem (NFS)     Shared storage for multiple EC2 instances,Mountable On Multiple EC2 instances
Glacier                           Cold storage                                    Long-term archival and backups
3Ô∏è‚É£ Database Services
Service                           Purpose                                         Use Case
RDS (Relational Database Service) Managed SQL databases                           MySQL, PostgreSQL, MariaDB, Oracle, SQL Server
DynamoDB                          NoSQL database                                  Low-latency, scalable apps (gaming, IoT, e-commerce)
Redshift                          Data warehouse                                  Analytics and BI tools
ElastiCache                       In-memory cache                                 Caching with Redis or Memcached
4Ô∏è‚É£ Networking & Security
Service                           Purpose                                         Use Case
VPC (Virtual Private Cloud)       Isolated network                                Secure AWS networking
Route 53                          DNS & domain management                         Domain registration, routing
CloudFront                        CDN (Content Delivery Network)                  Global caching and acceleration
IAM(Identity & Access Management) Access control                                  User roles, permissions
WAF(Web Application Firewall)     Protection from attacks                         Blocks SQL injection, XSS
5Ô∏è‚É£ DevOps, Monitoring & Logging
Service                           Purpose                                         Use Case
CloudFormation                    Infrastructure as Code(IaC)                     Automate AWS resource creation
CloudWatch                        Monitoring & logs                               Track metrics and alerts
CloudTrail                        Audit logs                                      Security and compliance tracking
CodePipeline                      CI/CD automation                                Deploy apps faster
CodeDeploy                        Automated deployments                           Blue/green, rolling deployments
6Ô∏è‚É£ AI, Machine Learning & Analytics
Service                           Purpose                                         Use Case
SageMaker                         Managed ML service                              Train & deploy ML models
Rekognition                       Image & video analysis                          Face detection, OCR, object recognition
Textract                          Extract text from docs                          Process invoices, receipts
Athena                            SQL queries on S3                               Analyze logs, big data
üìå Most Popular AWS Services in Different Use Cases
Use Case                          Popular AWS Services
Hosting Websites & Apps           EC2, S3, RDS, Route 53, CloudFront
Serverless Applications           Lambda, API Gateway, DynamoDB, S3
Big Data & Analytics              Redshift, Athena, Kinesis, EMR
DevOps & Automation               CloudFormation, CodePipeline, CodeDeploy
Security & Compliance             IAM, WAF, CloudTrail, GuardDuty
---------------------------------------------------------------------------------------------------------------------
1Ô∏è‚É£ Create an EKS Cluster
Instead of manually setting up an EKS cluster using AWS CLI and IAM policies, you can create a cluster with a single command:
eksctl create cluster --name my-cluster --region us-west-2 --nodegroup-name my-nodes --nodes 2 --nodes-min 1 --nodes-max 3
üîπ What it does:
Creates a new EKS cluster in us-west-2
Sets up an Auto Scaling Group with a min/max of 1‚Äì3 nodes
Configures required IAM roles and networking

‚úÖ Example Output:
[‚Ñπ]  creating EKS cluster "my-cluster" in "us-west-2"
[‚úî]  EKS cluster "my-cluster" is ready!

2Ô∏è‚É£ List All EKS Clusters
eksctl get cluster
‚úÖ Example Output:
NAME         REGION      EKSCTL CREATED
my-cluster   us-west-2   True

3Ô∏è‚É£ Delete an EKS Cluster
If you want to delete an EKS cluster along with its associated resources:
eksctl delete cluster --name my-cluster --region us-west-2
‚úÖ This will delete:
The EKS cluster
The worker nodes
The associated IAM roles

4Ô∏è‚É£ Add a New Node Group
You can add more nodes to an existing EKS cluster:
eksctl create nodegroup --cluster my-cluster --name new-nodes --nodes 2
‚úÖ Supports:
On-Demand instances
Spot instances (for cost-saving)
GPU instances (for ML workloads)

5Ô∏è‚É£ Delete a Node Group
If you want to remove a specific node group:
eksctl delete nodegroup --cluster my-cluster --name new-nodes

6Ô∏è‚É£ Upgrade an EKS Cluster
To upgrade your cluster to the latest Kubernetes version:
eksctl upgrade cluster --name my-cluster --region us-west-2
‚úÖ This will upgrade the EKS control plane to the latest Kubernetes version.

7Ô∏è‚É£ Manage IAM Roles & Permissions
To associate an IAM role with an EKS cluster:
eksctl create iamidentitymapping --cluster my-cluster --arn arn:aws:iam::123456789012:role/AdminRole --group system:masters
üîπ This gives the IAM role admin access to the cluster.

8Ô∏è‚É£ Generate Kubernetes Config File
To configure kubectl to work with your EKS cluster:
eksctl utils write-kubeconfig --region us-west-2 --cluster my-cluster
Now you can run:
kubectl get nodes

9Ô∏è‚É£ Create a Cluster with Fargate (Serverless)
If you don‚Äôt want to manage worker nodes, you can create an EKS cluster with AWS Fargate:

eksctl create cluster --name my-fargate-cluster --region us-west-2 --fargate
‚úÖ AWS Fargate allows running Kubernetes workloads without managing EC2 instances.

Feature                              Command
Create EKS Cluster                   eksctl create cluster --name my-cluster
List Clusters                        eksctl get cluster
Delete EKS Cluster                   eksctl delete cluster --name my-cluster
Add Node Group                       eksctl create nodegroup --cluster my-cluster --name new-nodes
Delete Node Group                    eksctl delete nodegroup --cluster my-cluster --name new-nodes
Upgrade EKS Cluster                  eksctl upgrade cluster --name my-cluster
Manage IAM Roles                     eksctl create iamidentitymapping --cluster my-cluster --arn <IAM_ROLE_ARN>
Update kubeconfig                    eksctl utils write-kubeconfig --cluster my-cluster
Deploy Serverless EKS                eksctl create cluster --fargate
