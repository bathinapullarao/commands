General Purpose Instances: T-Series(Burstable Performance)T4g, T3, T3a, T2,| M-Series(Balanced Compute & Memory)M7g, M6g, M6i, M5, M4
Compute Optimized Instances:C-Series(High Compute Performance)C7g, C7i, C6g, C6i, C5, C4,
Memory Optimized Instances:R-Series (High RAM for Databases & In-Memory Caching)R7g, R6g, R6i, R5, R4 
                    | X-Series (Extreme Memory for SAP & Large Databases) X2gd, X2idn, X2iedn |Z-Series (High Frequency & Memory) z1d
Storage Optimized Instances:  I-Series (High IOPS Storage) I4g, I3, I3en | D-Series (Dense Storage for Data Warehousing) D3, D2
                            | H-Series (HDD Optimized for Big Data) H1
Accelerated Computing Instances: P-Series (GPU for Machine Learning & AI) P4d, P3, P2 | G-Series (Graphics & ML Inference) G5, G4ad, G4dn
                            | Inf-Series (Inference Optimization) Inf2, Inf1 | Trn-Series (Deep Learning Training on AWS Chips)Trn1
                            |F-Series (FPGA for Custom Workloads) F1
Choosing the Right Instance Type: Workload	Recommended Instance Type
Web Apps, Microservices	T4g, T3, M5
High-Performance Computing	C7g, C6i, C5
Databases (SQL, NoSQL)	R6i, R5, X2gd
Machine Learning Training	P4d, Trn1
AI Inference	Inf2, G5
Video Processing, Streaming	G4dn, G5
Data Warehousing	D3, I3, H1
-------------------------------------------------------------------------------------------------------
For unpredictable, flexible workloads ‚Üí On-Demand
For consistent, steady workloads ‚Üí Reserved Instances or Savings Plans
For cost-sensitive, fault-tolerant jobs ‚Üí Spot Instances
For compliance/security needs ‚Üí Dedicated Hosts/Instances
For dynamically scaling apps ‚Üí Auto Scaling with a mix of instances
-------------------------------------------------------------------------------------------------------
Option 1: Get from IAM Console (Recommended)
Log in to AWS Console---->Go to AWS IAM Console---->Navigate to Users--->In the IAM dashboard, click Users in the left panel.
Select your user or create a new IAM user---->Create Access Keys:Click the Security credentials tab.
Under Access keys, click Create access key.Copy & Save the Access Key ID and Secret Access Key. ‚ö†Ô∏è You will not be able to see the Secret Access Key again after this step!
Option 2: Get Using AWS CLI
If you already have an AWS CLI session with sufficient permissions, you can create an access key using:
aws iam create-access-key --user-name <YOUR_IAM_USER>
aws iam create-access-key --user-name my-user
--------------------------------------------------------------------------------------------------------
aws configure
 AWS Access Key ID: Your AWS access key.
 AWS Secret Access Key: Your secret access key.
 Default region: Specify the default AWS region (e.g., us-west-2).
 Output format: Choose the default output format (e.g., json, text, table).
 ---
 export AWS_ACCESS_KEY_ID=<your-access-key-id>
 export AWS_SECRET_ACCESS_KEY=<your-secret-access-key>
 export AWS_DEFAULT_REGION=<your-region>
 ---
 AWS Credentials File:Stored in ~/.aws/credentials and automatically used by AWS SDKs and CLI.
 [default]
 aws_access_key_id = <your-access-key-id>
 aws_secret_access_key = <your-secret-access-key>
----
aws eks update-kubeconfig --region <region> --name <cluster-name>
kubectl config get-contexts
CURRENT   NAME                    CLUSTER                 AUTHINFO                NAMESPACE
*         my-eks-cluster-context  arn:aws:eks:us-west-2:123456789012:cluster/my-eks-cluster  aws:eks-user
          another-cluster-context arn:aws:eks:us-west-2:123456789012:cluster/another-cluster  aws:eks-user
kubectl config use-context <context-name>   //NAME column has context-name
kubectl config current-context
kubectl get nodes
----
aws ec2 describe-instances
aws ec2 start-instances --instance-ids i-1348636c
aws sns publish --topic-arn arn:aws:sns:us-east-1:546419318123:OperationsError --message "Script Failure"
aws sqs receive-message --queue-url https://queue.amazonaws.com/546419318123/Test
aws help
aws autoscaling help
aws autoscaling create-auto-scaling-group help
aws s3 ls s3://mybucket
aws s3 cp myfolder s3://mybucket/myfolder --recursive
aws s3 sync myfolder s3://mybucket/myfolder --exclude *.tmp
s3fs-fuse  <--s3fs is a FUSE filesystem that allows you to mount an Amazon S3 bucket as a local filesystem(yum install s3fs-fuse)
s3fs mybucket /path/to/mountpoint -o passwd_file=${HOME}/.passwd-s3fs   <--mounting a dir to bucket
---------------------------------------------------------------------------------------------------------
Use Case                                                                Best Choice
Restrict API Access to AWS services (e.g., S3, DynamoDB)                IAM
Restrict Kubernetes API Access for Pods                                 Service Account
Restrict instance-level access (e.g., allow SSH to EC2)                 Security Group
Restrict subnet-level traffic (e.g., block all outgoing traffic)        NACL
---------------------------------------------------------------------------------------------------------
1Ô∏è‚É£ Compute Services (Run Applications & Workloads)
Service                           Purpose                                         Use Case
EC2 (Elastic Compute Cloud)       Virtual machines (VMs)                          Web servers, applications, databases
Lambda                            Serverless compute                              Event-driven apps, microservices, API backends
ECS (Elastic Container Service)   Managed Docker containers                       Running containers without managing servers
EKS (Elastic Kubernetes Service)  Managed Kubernetes                              Kubernetes-based applications
Fargate                           Serverless containers                           Running containers without managing infrastructure
2Ô∏è‚É£ Storage & Backup Services
Service                           Purpose                                         Use Case
S3 (Simple Storage Service)	      Object storage	                                Website hosting, backups, big data
EBS (Elastic Block Store)	        Block storage for EC2	                          Persistent storage for EC2
EFS (Elastic File System)	        Managed file system	                            Shared storage for multiple EC2 instances
Glacier                           Cold storage                                    Long-term archival and backups
3Ô∏è‚É£ Database Services
Service                           Purpose                                         Use Case
RDS (Relational Database Service)	Managed SQL databases	                          MySQL, PostgreSQL, MariaDB, Oracle, SQL Server
DynamoDB	                        NoSQL database	                                Low-latency, scalable apps (gaming, IoT, e-commerce)
Redshift	                        Data warehouse                                  Analytics and BI tools
ElastiCache                       In-memory cache	                                Caching with Redis or Memcached
4Ô∏è‚É£ Networking & Security
Service	Purpose	Use Case
VPC (Virtual Private Cloud)	Isolated network	Secure AWS networking
Route 53	DNS & domain management	Domain registration, routing
CloudFront	CDN (Content Delivery Network)	Global caching and acceleration
IAM (Identity & Access Management)	Access control	User roles, permissions
WAF (Web Application Firewall)	Protection from attacks	Blocks SQL injection, XSS
5Ô∏è‚É£ DevOps, Monitoring & Logging
Service	Purpose	Use Case
CloudFormation	Infrastructure as Code (IaC)	Automate AWS resource creation
CloudWatch	Monitoring & logs	Track metrics and alerts
CloudTrail	Audit logs	Security and compliance tracking
CodePipeline	CI/CD automation	Deploy apps faster
CodeDeploy	Automated deployments	Blue/green, rolling deployments
6Ô∏è‚É£ AI, Machine Learning & Analytics
Service	Purpose	Use Case
SageMaker	Managed ML service	Train & deploy ML models
Rekognition	Image & video analysis	Face detection, OCR, object recognition
Textract	Extract text from docs	Process invoices, receipts
Athena	SQL queries on S3	Analyze logs, big data
üìå Most Popular AWS Services in Different Use Cases
Use Case	Popular AWS Services
Hosting Websites & Apps	EC2, S3, RDS, Route 53, CloudFront
Serverless Applications	Lambda, API Gateway, DynamoDB, S3
Big Data & Analytics	Redshift, Athena, Kinesis, EMR
DevOps & Automation	CloudFormation, CodePipeline, CodeDeploy
Security & Compliance	IAM, WAF, CloudTrail, GuardDuty
Would you like recommendations for your specific AWS use case? üöÄ
