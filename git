Ref:https://guides.github.com/features/mastering-markdown/   <-- to write .md files
Ref:https://www.tutorialspoint.com/git/git_rename_operation.htm
- file too long -execute below command in bash or modify config file
#Git global setup
git config --list
git config --system core.longpaths true
git config --global user.name "BathinaPullarao"
git config --global user.email "bathina.pullarao@gmail.com"
git config --global http.proxy 127.0.0.1:8087
// To check if at least the clone works without checking said certificate, you can set:
export GIT_SSL_NO_VERIFY=1
#or
git config --global http.sslverify false
git rev-parse $(git log --oneline -n 1 . | cut -d " " -f 1) > a.txt   <--To get full commit id form short commit id
#Create a new repository
git clone git@git
cd gcm-uat
git switch -c main
touch README.md
git add README.md
git commit -m "add README"
git push -u origin main
git branch -d <branch-name>    <--delete branch localy, If the branch contains unmerged changes, though, Git will refuse to delete it.
git branch -D <branch-name>    <--force the deletion by replacing the -d parameter with an uppercase D:
git push --delete <remote name> <branch name>  <--You don’t use the git branch command to delete a remote branch.
git ignore
#Push an existing folder
cd existing_folder
git init --initial-branch=main
git remote add origin git@.git
git add .
git commit -m "Initial commit"
git push -u origin main

#Push an existing Git repository
cd existing_repo
git remote rename origin old-origin
git remote add origin git@git
git push -u origin --all
git push -u origin --tags

git clone git@git.systm.com:spo-gitlab/project.git
git clone https://token name you picked:the personal access token@gitlab.umich.edu/user or project/repo name     <--by usnig tockenname:acesstoken@cloneurl
git clone -b release git@git.systm.com:spo-gitlab/project.git
git branch -a, git checkout feature/3-8-69/OC-299
git add <--our files   git reset HEAD .   to unstage
git commit -m "prepare cookbook for tomcat installation"
git commit -a --author="Author" --message="Issue title #id"
git status -s  <--shows modified files
git push  origin feature/69/gk-998
git pull   <-- To pull the updated code from gitlab to local, it will not work if any new files available in local
git fetch  <-- If any new branchs availabe at gitlab it will be fetched to local
git log
git diff
git stash      <--Now, you want to switch branches for customer escalation, but you don’t want to commit what you’ve been working on yet; so you’ll stash the changes
git stash list
git stash pop = git stash apply + git stash drop
git stash pop  <-- we can get back the changes which we not commited after we switching to old branch.
git merge      <--Git merge is a command that allows you to merge branches from Git
git merge --squash branchname <-- Squash merging is a merge option that allows you to condense the Git history of topic branches when you complete a pull request. 
                  Instead of each commit on the topic branch being added to the history of the default branch, a squash merge adds all the file changes to a 
                  single new commit on the default branch.
git rebase     <--Git rebase is a command that allows developers to integrate changes from one branch to another. 
git cherrypick commit-id <--pick a commit from a branch and applying it to another branch **Make sure you are on the branch you want to apply the commit to

main.yml#L208-217   <--to higlight specific lines in gitlab here inthis case line 208 to 217

Recommended Git Branching Strategy
1. Main Branches
###main or production
Represents the code that’s deployed in Production.
Only thoroughly tested code gets merged here.

###uat
Represents the code that's ready for User Acceptance Testing.
Acts as a pre-production environment.

###qa
Represents code that's being tested by QA.
Merges from develop after feature testing.

###develop
Active development branch (Dev environment).
All features and bug fixes are merged here first.

2. Supporting Branches
➕ Feature Branches
Naming: feature/feature-name
Created from: develop
Merged into: develop

🐛 Bugfix Branches
Naming: bugfix/bug-description
Created from: develop or current environment branch (e.g., qa)
Merged into: develop or corresponding environment

🔧 Hotfix Branches
Naming: hotfix/critical-issue
Created from: main
Merged into: main, develop, and optionally uat

🚀 Workflow Summary
Task	Branch
Start a new feature	feature/* from develop
Complete feature	Merge into develop
Ready for QA	Merge develop into qa
Ready for UAT	Merge qa into uat
Ready for Prod	Merge uat into main
Critical fix in Prod	hotfix/* from main, then merge into main + develop

🔄 CI/CD Recommendations
Develop branch → Dev environment
QA branch → QA environment
UAT branch → UAT environment
Main branch → Production
--------------------------------------------------------------------------------------------------------------------------------
Here's a diagram and Git commands to support the branching strategy we discussed for Dev, QA, UAT, and Production environments.

📊 Git Branching Diagram
        +------------------+               
        |  main (Prod)     |<--------------------------+       
        +------------------+                           |       
                   ^                                    |
                   |                           +-----------------+
        +----------+---------+                 | hotfix/*        |
        |     uat (UAT)      |<--------------+ +-----------------+
        +--------------------+               |
                   ^                         |
        +----------+---------+               |
        |     qa (QA)        |<-------------+ 
        +--------------------+             
                   ^                       
        +----------+---------+             
        |  develop (Dev)     |<----------------+
        +--------------------+                 |
                  ^                            |
       +----------+----------+        +--------------------+
       | feature/feature-x   |        | bugfix/issue-y     |
       +---------------------+        +--------------------+

🧰 Git Commands by Workflow
1. Create Environment Branches (once)
git checkout -b develop main
git push -u origin develop

git checkout -b qa develop
git push -u origin qa

git checkout -b uat qa
git push -u origin uat

2. Start a Feature
git checkout develop
git pull origin develop
git checkout -b feature/awesome-feature

Work on it, then:
git add .
git commit -m "Add awesome feature"
git push -u origin feature/awesome-feature

3. Merge Feature to Develop (Dev environment)
git checkout develop
git pull origin develop
git merge feature/awesome-feature
git push origin develop

4. Promote to QA
git checkout qa
git pull origin qa
git merge develop
git push origin qa

5. Promote to UAT
git checkout uat
git pull origin uat
git merge qa
git push origin uat

6. Promote to Production
git checkout main
git pull origin main
git merge uat
git push origin main

7. Hotfix in Production
git checkout main
git pull origin main
git checkout -b hotfix/fix-crash

# make changes, commit
git commit -am "Hotfix: fix production crash"
git push -u origin hotfix/fix-crash

# merge back
git checkout main
git merge hotfix/fix-crash
git push origin main

git checkout develop
git merge hotfix/fix-crash
git push origin develop
