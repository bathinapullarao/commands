# Dockerfile instructions 
FROM, 
ARG,ENV, <-- Both can store values inside varibles but ENV varible value even can available after creating container.
WORKDIR, <-- Instruction is used to set the working directory for all the subsequent Dockerfile instructions.  
             Some frequently used instructions in a Dockerfile are RUN, ADD, CMD, ENTRYPOINT, and COPY.

RUN,  <--lets you execute commands inside of your Docker image. These commands get executed once at build time and get written into your Docker image as a new layer.
CMD,  <--lets you define a default command to run when your container starts.
ENTRYPOINT, <--Same like CMD but 
ADD,  <--command is used to copy files/directories into a Docker image
      ADD source(even URL) destination
COPY, <-- COPY <src> â€¦ <dest> 
EXPOSE,  <--is used to map local port container port
PUBLISH,  <-- -p 8080  Publish individual port at eg(docker run -d -p 8080 an_image)
              -P, --publish-all  Publish all exposed ports to random ports
LABEL, USER, VOLUME,  STOPSIGNAL, and ONBUILD.

eg:
FROM centos:centos7
RUN yum update -y \
    && yum install -y \
    epel-release \
    gcc \
    git \
    httpd \
    net-tools \
    nmap-ncat \
    openssh-clients \
    psacct \
    sysstat \
    tcpdump \
    telnet \
    traceroute \
    unzip \
    wget
RUN yum install -y http://---.rpm
WORKDIR /tmp
RUN ssh-keyscan -t rsa domainname > /root/.ssh/known_hosts    <--accept domain
CMD ["/usr/sbin/httpd","-DFOREGROUND"]


# Command to login docker container
docker exec -it 6a4f2dba71c2 /bin/bash
# docker cp
* docker cp containerId:/file/path/in/container/file /host/local/path/file
* docker cp /host/local/path/file containerId:/file/path/in/container/file


