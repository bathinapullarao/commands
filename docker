# Dockerfile instructions 
FROM, 
ARG,ENV, <-- Both can store values inside varibles but ENV varible value even can available after creating container.
WORKDIR, <-- Instruction is used to set the working directory for all the subsequent Dockerfile instructions.  
             Some frequently used instructions in a Dockerfile are RUN, ADD, CMD, ENTRYPOINT, and COPY.

RUN,  <--lets you execute commands inside of your Docker image. These commands get executed once at build time and get written into your Docker image as a new layer.
CMD,  <--lets you define a default command to run when your container starts.
ENTRYPOINT, <--Same like CMD but 
ADD,  <--command is used to copy files/directories into a Docker image
      ADD source(even URL) destination
COPY, <-- COPY <src> … <dest> 
EXPOSE,  <--is used to map local port container port
PUBLISH,  <-- -p 8080  Publish individual port at eg(docker run -d -p 8080 an_image)
              -P, --publish-all  Publish all exposed ports to random ports
LABEL maintainer="Bathina Pullarao"              
USER, VOLUME,  STOPSIGNAL, and ONBUILD.

eg:
FROM centos:centos7
RUN yum update -y \
    && yum install -y \
    epel-release \
    gcc \
    git \
    httpd \
    net-tools \
    nmap-ncat \
    openssh-clients \
    psacct \
    sysstat \
    tcpdump \
    telnet \
    traceroute \
    unzip \
    wget
    # Ref:https://www.geeksforgeeks.org/apt-get-command-in-linux-with-examples/#:~:text=%E2%80%93no%2Dinstall%2Drecommends%20%3A,as%20a%20dependency%20to%20install.&text=%2Dd%20or%20%E2%80%93download%2Donly,not%20unpack%20or%20install%20them.
    --no-install-recommends      <--By passing this option, the user lets apt-get know not to consider recommended packages as a dependency to install.
    -d or –download-only         <-- By passing this option, the user specifies that apt-get should only retrieve the packages, and not unpack or install them.
    -y or –yes or –assume-yes    <-- it may sometimes prompt the user for a yes/no. With this option, it is specified that it should assume ‘yes’ for all prompts
RUN yum install -y http://---.rpm
WORKDIR /tmp
RUN ssh-keyscan -t rsa domainname > /root/.ssh/known_hosts    <--accept domain
CMD ["/usr/sbin/httpd","-DFOREGROUND"]

#To create a image form dockerfile,  you should execute below command from the folder which contain dockerfile
docker build -t getting-started .
DOCKER_BUILDKIT=1 docker build --secret id=ssh,src=~/.ssh/id_rsa   --build-arg GIT_BRANCH=release   -f Dockerfile   -t php-apache:1.0 .

# Command to login docker container
docker exec -it 6a4f2dba71c2 /bin/bash
# docker cp
* docker cp containerId:/file/path/in/container/file /host/local/path/file
* docker cp /host/local/path/file containerId:/file/path/in/container/file

#docker compose
docker-compose -f mongo.yaml up -d
docker-compose -f mongo.yaml down

#docker network
docker network create mongo-network
#use network
docker run -d \                             <--demen
-p 27017:27017 \
-e MONGO_INITDB_ROOT_USERNAME=admin \
-e MONGO_INITDB_ROOT_PASSWORD=password \
--net mongo-network \
--name mongodb \
mongo
