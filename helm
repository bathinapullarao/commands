**Helm uses the current Kubernetes context from your kubeconfig file (usually ~/.kube/config).
kubectl config current-context
kubectl config use-context <context-name>
helm create mychart                <--create folder structure
helm package mychart               <--packges to filename.tgz file
helm install myrelease mychart     <--deploys, myrelease: The name you are giving to this Helm release. Helm uses this name to track and manage the deployment.
helm list                          <--Check the Helm releases
helm list --all-namespaces
helm upgrade myrelease mychart     <--To update the deployment with changes to the chart or values
helm rollback myrelease 1          <--revertback to previous version, 1: The target revision number to roll back to.
helm uninstall myrelease           <--delete the release and its resources
helm install myrelease mychart -f custom-values.yaml  <--mychart: The Helm chart to install (should be in the local directory 
                                    or a Helm repository).
                                  -f custom-values.yaml: Specifies a custom values.yaml file to override default values in the chart.
helm history myrelease          <--This will show the revision history of myrelease, so you can confirm which version you want to roll back to.             
helm history <release-name> --namespace <namespace>
helm rollback <release-name> <revision> --namespace <namespace>

To package and deploy applications using Helm, you need to create a Helm chart and use it to manage the Kubernetes resources for your application. Here's a step-by-step guide:

1. Install Helm
Make sure Helm is installed on your system. You can download and install it by following the Helm installation guide.

2. Create a Helm Chart
Run the following command to create a new Helm chart:

#bash
helm create mychart
This creates a directory structure like this:

mychart/
├── Chart.yaml
├── values.yaml
├── charts/
├── templates/
│   ├── deployment.yaml
│   ├── service.yaml
│   ├── ingress.yaml
│   ├── _helpers.tpl
│   └── NOTES.txt
3. Customize the Helm Chart
Edit Chart.yaml: Define metadata about your chart, such as its name and version.
Edit values.yaml: Add default values for your application (e.g., image name, replica count, ports).
Edit Templates:
Modify deployment.yaml to define your application's Deployment.
Modify service.yaml to define your application's Service.
Add or edit other templates as needed (e.g., ConfigMaps, Secrets, Ingress).
4. Package the Helm Chart
To package the Helm chart into a .tgz file:

**helm package mychart**
This creates a file like mychart-0.1.0.tgz.

5. Deploy the Application
Use the following command to deploy your Helm chart:
**helm install myrelease mychart**

myrelease is the release name.
mychart is the path to your chart directory or the .tgz file.
6. Verify the Deployment
Check the Helm releases:
**helm list**
Check the Kubernetes resources created:
**kubectl get all**

7. Update the Deployment
To update the deployment with changes to the chart or values, use:
**helm upgrade myrelease mychart**
8. Rollback a Release
If something goes wrong, you can roll back to a previous version:
**helm rollback myrelease 1**
1 is the revision number to roll back to.
9. Delete the Deployment
To delete the release and its resources:
**helm uninstall myrelease**
Additional Notes:
Using Custom Values: You can override default values in values.yaml using a custom file or inline:

**helm install myrelease mychart -f custom-values.yaml**
or
**helm install myrelease mychart --set key=value**
Helm Repository: If you want to share your chart, you can host it in a Helm repository.

helm history <release-name> --namespace <namespace>
helm rollback <release-name> <revision> --namespace <namespace>
