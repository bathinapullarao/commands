-- show running queries (pre 9.2)
SELECT procpid, age(clock_timestamp(), query_start), usename, current_query 
FROM pg_stat_activity 
WHERE current_query != '<IDLE>' AND current_query NOT ILIKE '%pg_stat_activity%' 
ORDER BY query_start desc;

-- show running queries (9.2)
SELECT pid, age(clock_timestamp(), query_start), usename, query 
FROM pg_stat_activity 
WHERE query != '<IDLE>' AND query NOT ILIKE '%pg_stat_activity%' 
ORDER BY query_start desc;

-- kill running query
SELECT pg_cancel_backend(procpid);

-- kill idle query
SELECT pg_terminate_backend(procpid);

-- vacuum command
VACUUM (VERBOSE, ANALYZE);

-- all database users
select * from pg_stat_activity where current_query not like '<%';

-- all databases and their sizes
select * from pg_user;

-- all tables and their size, with/without indexes
select datname, pg_size_pretty(pg_database_size(datname))
from pg_database
order by pg_database_size(datname) desc;

-- cache hit rates (should not be less than 0.99)
SELECT sum(heap_blks_read) as heap_read, sum(heap_blks_hit)  as heap_hit, (sum(heap_blks_hit) - sum(heap_blks_read)) / sum(heap_blks_hit) as ratio
FROM pg_statio_user_tables;

-- table index usage rates (should not be less than 0.99)
SELECT relname, 100 * idx_scan / (seq_scan + idx_scan) percent_of_times_index_used, n_live_tup rows_in_table
FROM pg_stat_user_tables 
ORDER BY n_live_tup DESC;

-- how many indexes are in cache
SELECT sum(idx_blks_read) as idx_read, sum(idx_blks_hit)  as idx_hit, (sum(idx_blks_hit) - sum(idx_blks_read)) / sum(idx_blks_hit) as ratio
FROM pg_statio_user_indexes;

-- Dump database on remote host to file
$ pg_dump -U username -h hostname databasename > dump.sql

-- Import dump into existing database
$ psql -d newdb -f dump.sql

Queries For lock Detection
SELECT * FROM pg_stat_activity WHERE state != 'idle';

Queries For Deadlock Detection
select pg_class.relname,pg_locks.* from pg_class,pg_locks where pg_class.relfilenode=pg_locks.relation;
select * from pg_locks;
select * from pg_locks where granted = 'f' //the query that is waiting
select * from pg_locks where transactionid = 'xx' // queries running in a transaction
select * from pg_stat_activity
##References http://rhaas.blogspot.in/2011/01/locking-in-postgresql.html
http://fishbowl.pastiche.org/2004/02/26/finding_open_locks_on_postgresql/
http://www.postgresql.org/docs/current/static/explicit-locking.html
http://stackoverflow.com/questions/1153364/postgresql-exclusive-lock-stops-application

create table newtablename as (select * from table);               <--create exact copy of table
create table newtablename as (select * from users) with no data;  <--table with structure only
CREATE INDEX idx_name on tablename(columnname);                   <--to create index
EXPLAN SELECT columname from tablename where columname='value';   <--to verify index on the specific column mustly should give value
select now () as time;                                            <--gives timestamp with time zone
select date_part('year', columname) from tablename limit 2;       <--It will give only year yyyy from yyyy-mm-dd limit 2 will give only two records
CREATE TEMP TABLE customers(customer_id INT);                     <--To create a temp table
DROP TABLE temp_table_name;                                       <--delete table or temp table
