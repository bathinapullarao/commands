After Running 'terraform init'   <--- This initializes the working directory and sets up the backend.
.terraform/ (Directory)          <--- Stores provider plugins, modules, and backend configuration.
.terraform.lock.hcl (File)       <--- Locks provider versions to ensure consistency across environments.
terraform.tfstate (only if a remote backend is configured during init) <--- Stores the current state of the infrastructure.

Why Use 'data' in Terraform?
Does not create resources,only reads existing ones.To fetch existing resources (e.g., an existing VPC, IAM role, or image).
To avoid hardcoding values and make configurations more dynamic.
To reference resources created outside of Terraform.

Execute terraform module by module
----------------------------------
##sample
terraform plan -target=module.module_instances.google_compute_region_instance_group_manager.ig_esserver
terraform apply -target=module.module_instances.google_compute_region_instance_group_manager.ig_esserver

terraform init
terraform validate
terraform plan
terraform apply
terraform plan -lock=false
terraform force-unlock -force IDcanbeshowninlockerror
terraform plan destroy 
terraform refresh      <--This will refresh your state by comparing it to your cloud infrastructure.
terraform output       <--output command is also useful for scripts to extract outputs from your configuration.
terraform taint google_compute_instance.vm_instance   <-- to tell Terraform to recreate the instance.
terraform show
terraform workspace 
terraform workspace  show
terraform workspace  select
terraform import       <-- command is used to import existing resources into Terraform.

##### Instance without autoscalar
resource "google_compute_instance" "instance_name"
resource "google_compute_address" "globalip_of_instance"
##### Instance with autosclaer
resource "google_compute_region_autoscaler" "autoscaler_apserver"
resource "google_compute_region_instance_group_manager" "instancegroup_apserver"
resource "google_compute_instance_template" "template_apserver"
resource "google_compute_health_check" "hc_apserver"
#### Loadbalancer
resource "google_compute_global_forwarding_rule" "forwardingrule_aplb"
resource "google_dns_record_set" "dns_aplb"
resource "google_compute_global_address" "globalip_aplb"
resource "google_compute_target_https_proxy" "target_httpsproxy_aplb"
resource "google_compute_managed_ssl_certificate" "certificate_aplb"
resource "google_compute_url_map" "lb_apserver_urlmap"
resource "google_compute_backend_service" "backend_aplb"
resource "google_compute_health_check" "healthcheck_aplb"
##### Network
resource "google_compute_network" "vpc_name"
resource "google_compute_subnetwork" "subnet_name"
resource "google_compute_global_address" "subnet_private"
resource "google_service_networking_connection" "private_service_connection"
#####DB
resource "google_sql_database_instance" "deabase_instance_name"
resource "google_sql_database" "databasename"
resource "google_sql_user" "database_username"
#####Firewall
resource "google_compute_firewall" "allow_fm_bastion"

#####GKE###########
resource "google_container_cluster" "cluster1"
resource "google_container_node_pool" "pools"
